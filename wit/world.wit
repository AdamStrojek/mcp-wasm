package mcp-wasm:server@0.1.0;

interface prompts {
    get-list: func() -> list<prompt>;

    record prompt {
        name: string,
        description: string,
        arguments: list<prompt-argument>
    }

    record prompt-argument {
        name: string,
        description: string,
        required: bool,
    }
}

interface tools {
    record tool {
        name: string,
        description: string,
        input-schema: string,
    }

    get-list: func() -> list<tool>;

    record image {
        data: string,
        mime-type: string,
    }

    record %resource {
        uri: string,
        mime-type: string,
        text: string,
    }

    variant tool-response {
        text-response(string),
        image(image),
        %resource(%resource)
    }

    call: func(tool-name: string, params: string) -> tool-response;
}

world server {
    // TODO: change this into `flag` type
    type capability = tuple<string,bool>;

    record version-info {
        name: string,
        version: string
    }

    /// Initialize function
    ///
    /// Important change from original JSON-RPC Interface is to replace nested structure of capabilities
    /// with flat list of tuples that consists of key and value. To "simulate" nested structure use `/` delimiter
    export initialize: func(client-info: version-info, capabilities: list<capability>) -> tuple<version-info, list<capability>>;

    /// Notify function, used to send notificaitons by client
    // TODO: Should be import?
    export notify: func(name: string, params: option<string>);

    export resources;

    export prompts;

    export tools;

}
